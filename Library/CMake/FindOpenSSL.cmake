# find_openssl(RELEASE_ROOT_DIR DEBUG_ROOT_DIR)
#
# This function locates the Opus library, using a couple of provided paths for searching.
#
# Usage:
#	find_openssl(RELEASE_ROOT_DIR DEBUG_ROOT_DIR)
# Where:
#	RELEASE_ROOT_DIR = The directory containing the RELEASE version of the library, or library's linker file.
#	DEBUG_ROOT_DIR = The directory containing the DEBUG version of the library, or library's linker file.
# What it produces:
#	LIBSSL_LIBRARY_RELEASE, LIBSSL_LIBRARY_DEBUG and in the case of SHARED LIBRARIES - 
#	LIBSSL_RUNTIME_RELEASE, and LIBSSL_RUNTIME_DEBUG. Which each points to the respective files of each kind. 
#	LIBCRYPTO_LIBRARY_RELEASE, LIBCRYPTO_LIBRARY_DEBUG and in the case of SHARED LIBRARIES - 
#	LIBCRYPTO_RUNTIME_RELEASE, and LIBCRYPTO_RUNTIME_DEBUG. Which each points to the respective files of each kind. 
#
function(find_openssl RELEASE_ROOT_DIR DEBUG_ROOT_DIR)
	find_library(
		LIBCRYPTO_LIBRARY_RELEASE 
		NAMES "libcrypto${LIBRARY_SUFFIX}" 
		PATHS "${RELEASE_ROOT_DIR}" NO_DEFAULT_PATH
	)
	find_library(
		LIBCRYPTO_LIBRARY_DEBUG
		NAMES "libcrypto${LIBRARY_SUFFIX}"
		PATHS "${DEBUG_ROOT_DIR}" NO_DEFAULT_PATH
	)
	find_library(
		LIBSSL_LIBRARY_RELEASE 
		NAMES "libssl${LIBRARY_SUFFIX}" 
		PATHS "${RELEASE_ROOT_DIR}" NO_DEFAULT_PATH
	)
	find_library(
		LIBSSL_LIBRARY_DEBUG 
		NAMES "libssl${LIBRARY_SUFFIX}" 
		PATHS "${DEBUG_ROOT_DIR}" NO_DEFAULT_PATH
	)
	if (LIBSSL_LIBRARY_RELEASE AND LIBSSL_LIBRARY_DEBUG AND LIBCRYPTO_LIBRARY_RELEASE AND LIBCRYPTO_LIBRARY_DEBUG)
		list(APPEND RELEASE_LIBRARIES_RAW "${LIBSSL_LIBRARY_RELEASE}")
		list(APPEND DEBUG_LIBRARIES_RAW  "${LIBSSL_LIBRARY_DEBUG}")
		list(APPEND RELEASE_LIBRARIES_RAW "${LIBCRYPTO_LIBRARY_RELEASE}")
		list(APPEND DEBUG_LIBRARIES_RAW  "${LIBCRYPTO_LIBRARY_DEBUG}")
		set(RELEASE_LIBRARIES_RAW "${RELEASE_LIBRARIES_RAW}" PARENT_SCOPE)
		set(DEBUG_LIBRARIES_RAW  "${DEBUG_LIBRARIES_RAW}" PARENT_SCOPE)
		if (WIN32)
			cmake_path(GET LIBSSL_LIBRARY_RELEASE PARENT_PATH LIBSSL_RELEASE_FILE_PATH)
			find_file(
				LIBSSL_RUNTIME_RELEASE
				NAMES "libssl-3-x64.dll" 
				PATHS "${LIBSSL_RELEASE_FILE_PATH}/" "${LIBSSL_RELEASE_FILE_PATH}/../bin/"
				NO_DEFAULT_PATH
			)
			cmake_path(GET LIBSSL_LIBRARY_DEBUG PARENT_PATH LIBSSL_DEBUG_FILE_PATH)
			find_file(
				LIBSSL_RUNTIME_DEBUG
				NAMES "libssl-3-x64.dll"
				PATHS "${LIBSSL_DEBUG_FILE_PATH}/" "${LIBSSL_DEBUG_FILE_PATH}/../bin/"
				NO_DEFAULT_PATH
			)
			cmake_path(GET LIBCRYPTO_LIBRARY_RELEASE PARENT_PATH LIBCRYPTO_RELEASE_FILE_PATH)
			find_file(
				LIBCRYPTO_RUNTIME_RELEASE
				NAMES "libcrypto-3-x64.dll" 
				PATHS "${LIBCRYPTO_RELEASE_FILE_PATH}/" "${LIBCRYPTO_RELEASE_FILE_PATH}/../bin/"
				NO_DEFAULT_PATH
			)
			cmake_path(GET LIBCRYPTO_LIBRARY_DEBUG PARENT_PATH LIBCRYPTO_DEBUG_FILE_PATH)
			find_file(
				LIBCRYPTO_RUNTIME_DEBUG
				NAMES "libcrypto-3-x64.dll"
				PATHS "${LIBCRYPTO_DEBUG_FILE_PATH}/" "${LIBCRYPTO_DEBUG_FILE_PATH}/../bin/"
				NO_DEFAULT_PATH
			)
			if (NOT LIBSSL_RUNTIME_RELEASE OR NOT LIBSSL_RUNTIME_DEBUG OR NOT LIBCRYPTO_RUNTIME_RELEASE OR NOT LIBCRYPTO_RUNTIME_DEBUG)
				message(FATAL_ERROR "Couldn't find OpenSSL Dlls!")
			else()
				list(APPEND LIBRARY_NAMES "LIBSSL")
				list(APPEND RELEASE_RUNTIMES_RAW "${LIBSSL_RUNTIME_RELEASE}")
				list(APPEND DEBUG_RUNTIMES_RAW  "${LIBSSL_RUNTIME_DEBUG}")
				list(APPEND LIBRARY_NAMES "LIBCRYPTO")
				list(APPEND RELEASE_RUNTIMES_RAW "${LIBCRYPTO_RUNTIME_RELEASE}")
				list(APPEND DEBUG_RUNTIMES_RAW  "${LIBCRYPTO_RUNTIME_DEBUG}")
				set(LIBRARY_NAMES "${LIBRARY_NAMES}" PARENT_SCOPE)
				set(RELEASE_RUNTIMES_RAW "${RELEASE_RUNTIMES_RAW}" PARENT_SCOPE)
				set(DEBUG_RUNTIMES_RAW  "${DEBUG_RUNTIMES_RAW}" PARENT_SCOPE)
			endif()
		endif()
		message(STATUS "Found OpenSSL!")
	else()
		message(FATAL_ERROR "Couldn't find OpenSSL!")
	endif()
endfunction()