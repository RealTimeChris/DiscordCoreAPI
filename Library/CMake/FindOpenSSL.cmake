# find_openssl(RELEASE_ROOT_DIR DEBUG_ROOT_DIR)
#
# This function locates the Libz library, using a couple of provided paths for searching.
#
# Usage:
#	find_openssl(RELEASE_ROOT_DIR DEBUG_ROOT_DIR)
# Where:
#	RELEASE_ROOT_DIR = The directory containing the RELEASE version of the library, or library's linker file.
#	DEBUG_ROOT_DIR = The directory containing the DEBUG version of the library, or library's linker file.
#	INCLUDE_DIR = The directory containing the public headers.
# What it produces:
#	OPENSSL::Crypto and OPENSLL::Ssl
#
function(find_openssl RELEASE_ROOT_DIR DEBUG_ROOT_DIR INCLUDE_DIR)
	find_library(
		LIBCRYPTO_RELEASE_LIBRARY 
		NAMES "libcrypto${LIBRARY_SUFFIX}" 
		PATHS "${RELEASE_ROOT_DIR}" NO_DEFAULT_PATH
	)
	find_library(
		LIBCRYPTO_DEBUG_LIBRARY
		NAMES "libcrypto${LIBRARY_SUFFIX}"
		PATHS "${DEBUG_ROOT_DIR}" NO_DEFAULT_PATH
	)
	find_library(
		LIBSSL_RELEASE_LIBRARY 
		NAMES "libssl${LIBRARY_SUFFIX}" 
		PATHS "${RELEASE_ROOT_DIR}" NO_DEFAULT_PATH
	)
	find_library(
		LIBSSL_DEBUG_LIBRARY 
		NAMES "libssl${LIBRARY_SUFFIX}" 
		PATHS "${DEBUG_ROOT_DIR}" NO_DEFAULT_PATH
	)
	if (LIBSSL_RELEASE_LIBRARY AND LIBSSL_DEBUG_LIBRARY AND LIBCRYPTO_RELEASE_LIBRARY AND LIBCRYPTO_DEBUG_LIBRARY)
		message(STATUS "Found OpenSSL libraries!")
	else()
		message(FATAL_ERROR "Couldn't find OpenSSL!")
		return()
	endif()
	if (WIN32)
		cmake_path(GET LIBSSL_RELEASE_LIBRARY PARENT_PATH LIBSSL_RELEASE_FILE_PATH)
		find_file(
			LIBSSL_RELEASE_DLL
			NAMES "libssl-3-x64.dll" 
			PATHS "${LIBSSL_RELEASE_FILE_PATH}/" "${LIBSSL_RELEASE_FILE_PATH}/../bin/"
			NO_DEFAULT_PATH
		)
		cmake_path(GET LIBSSL_DEBUG_LIBRARY PARENT_PATH LIBSSL_DEBUG_FILE_PATH)
		find_file(
			LIBSSL_DEBUG_DLL
			NAMES "libssl-3-x64.dll"
			PATHS "${LIBSSL_DEBUG_FILE_PATH}/" "${LIBSSL_DEBUG_FILE_PATH}/../bin/"
			NO_DEFAULT_PATH
		)
		cmake_path(GET LIBCRYPTO_RELEASE_LIBRARY PARENT_PATH LIBCRYPTO_RELEASE_FILE_PATH)
		find_file(
			LIBCRYPTO_RELEASE_DLL
			NAMES "libcrypto-3-x64.dll" 
			PATHS "${LIBCRYPTO_RELEASE_FILE_PATH}/" "${LIBCRYPTO_RELEASE_FILE_PATH}/../bin/"
			NO_DEFAULT_PATH
		)
		cmake_path(GET LIBCRYPTO_DEBUG_LIBRARY PARENT_PATH LIBCRYPTO_DEBUG_FILE_PATH)
		find_file(
			LIBCRYPTO_DEBUG_DLL
			NAMES "libcrypto-3-x64.dll"
			PATHS "${LIBCRYPTO_DEBUG_FILE_PATH}/" "${LIBCRYPTO_DEBUG_FILE_PATH}/../bin/"
			NO_DEFAULT_PATH
		)
		if (LIBSSL_RELEASE_DLL AND LIBSSL_DEBUG_DLL AND LIBCRYPTO_RELEASE_DLL AND LIBCRYPTO_DEBUG_DLL)
			add_library(OPENSSL::Ssl SHARED IMPORTED GLOBAL)
			set_target_properties(
				OPENSSL::Ssl PROPERTIES 
				IMPORTED_LOCATION_RELEASE "${LIBSSL_RELEASE_DLL}" IMPORTED_LOCATION_DEBUG "${LIBSSL_DEBUG_DLL}"
				IMPORTED_IMPLIB_RELEASE "${LIBSSL_RELEASE_LIBRARY}" IMPORTED_IMPLIB_DEBUG "${LIBSSL_DEBUG_LIBRARY}"
			)
			target_include_directories(OPENSSL::Ssl INTERFACE "${INCLUDE_DIR}")
			add_library(OPENSSL::Crypto SHARED IMPORTED GLOBAL)
			set_target_properties(
				OPENSSL::Crypto PROPERTIES 
				IMPORTED_LOCATION_RELEASE "${LIBCRYPTO_RELEASE_DLL}" IMPORTED_LOCATION_DEBUG "${LIBCRYPTO_DEBUG_DLL}"
				IMPORTED_IMPLIB_RELEASE "${LIBCRYPTO_RELEASE_LIBRARY}" IMPORTED_IMPLIB_DEBUG "${LIBCRYPTO_DEBUG_LIBRARY}"
			)
			target_include_directories(OPENSSL::Crypto INTERFACE "${INCLUDE_DIR}")
			message(STATUS "Found OpenSSL Dlls!")
		else()
			add_library(OPENSSL::Ssl STATIC IMPORTED GLOBAL)
			set_target_properties(
				OPENSSL::Ssl PROPERTIES 
				IMPORTED_LOCATION_RELEASE "${LIBSSL_RELEASE_LIBRARY}" IMPORTED_LOCATION_DEBUG "${LIBSSL_DEBUG_LIBRARY}"
			)
			target_include_directories(OPENSSL::Ssl INTERFACE "${INCLUDE_DIR}")
			add_library(OPENSSL::Crypto STATIC IMPORTED GLOBAL)
			set_target_properties(
				OPENSSL::Crypto PROPERTIES 
				IMPORTED_LOCATION_RELEASE "${LIBCRYPTO_RELEASE_LIBRARY}" IMPORTED_LOCATION_DEBUG "${LIBCRYPTO_DEBUG_LIBRARY}"
			)
			target_include_directories(OPENSSL::Crypto INTERFACE "${INCLUDE_DIR}")
			unset(LIBCRYPTO_RELEASE_DLL CACHE)
			unset(LIBCRYPTO_DEBUG_DLL CACHE)
			unset(LIBSSL_RELEASE_DLL CACHE)
			unset(LIBSSL_DEBUG_DLL CACHE)
			message(STATUS "Couldn't find OpenSSL Dlls - linking statically!")
		endif()
	endif()
endfunction()